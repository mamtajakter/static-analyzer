// lex.yy.cpp generated by reflex 1.5.8 from quack.lxx

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             yy::location
#define REFLEX_OPTION_YYSTYPE             yy::parser::semantic_type
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  yy
#define REFLEX_OPTION_bison_cc_parser     parser
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_header_file         "lex.yy.h"
#define REFLEX_OPTION_lex                 yylex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_namespace           yy
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "lex.yy.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top{ user code %}                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 1 "quack.lxx"

/* Quack scanner
 *
 * Dewi Yokelson
 *
 */

#include "quack.tab.hxx"  /* Generated by bison. */
#include "Messages.h"
#include "string.h"


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace yy {

class Lexer : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  Lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  static const int comment = 1;
  static const int scomment = 2;
  static const int Q = 3;
  static const int QQQ = 4;
  virtual void yylloc_update(yy::location& yylloc)
  {
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
  }
  virtual int yylex(yy::parser::semantic_type *lvalp, yy::location *llocp)
  {
    return yylex(*lvalp, *llocp);
  }
  virtual int yylex(yy::parser::semantic_type& yylval, yy::location& yylloc);
};

} // namespace yy

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 13 "quack.lxx"

/* Externally visible file name --
* for error messages.
* FIXME: Need to extract this from structures that reflex passes
* or else find another way to dig it out.
*/
std::string yyfilename = "What file is this, anyway?";

/* Some strings can't be matched in one gulp.  We need
 * a buffer in which to assemble them from parts.
 */
std::string string_buf = "";

void yyerror (const std::string &msg, yy::position* where) {
     std::cout << where << ": " << msg;
}

/* Some long messages that don't fit well in the code below */

std::string BAD_ESC_MSG =
  "Illegal escape code; only \\\\, \\0, \\t, \\n, \\r, \\n are permitted";
std::string BAD_NL_STR =
  "Unclosed string?  Encountered newline in quoted string.";
std::string BAD_EOF_STR =
  "Encountered EOF unexpectedly. Unclosed String?";


#line 45 "quack.lxx"
/* You'll probably want scanner states for both multi-line
   * comments and for triple-quote strings.  Do comments first,
   * because they're easier (you just throw away the text).  Then
   * do triple-quote strings.  You might consider doing the same for
   * normal strings with a single pair of double quotes, to avoid
   * writing a really ugly regex.  'comment' here is an example of
   * how to declare an exclusive scanner state.
   */

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int yy::Lexer::yylex(yy::parser::semantic_type& yylval, yy::location& yylloc)
{
  static const char *REGEX_INITIAL = "(?m)(==)|([<]=)|([>]=)|([(-/:->\\x7b\\x7d])|(class)|(def)|(extends)|(if)|(elif)|(else)|(while)|(return)|(typecase)|(and)|(or)|(not)|(boo)|([A-Z_a-z]+[0-9A-Z_a-z]*)|([0-9]+)|([\\x09\\x0a\\x0d\\x20]*)|([/][/])|([/][\\x2a])|(\")|(\"\"\")|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  static const char *REGEX_comment = "(?m)([\\x0a])|([^\\x2a]*)|([\\x2a][^/])|([\\x2a][/])";
  static const reflex::Pattern PATTERN_comment(REGEX_comment);
  static const char *REGEX_scomment = "(?m)";
  static const reflex::Pattern PATTERN_scomment(REGEX_scomment);
  static const char *REGEX_Q = "(?m)(\")|([\\x5c][\"0\\x5cbfnrt])|([\\x5c].)|(\\n)|(.)";
  static const reflex::Pattern PATTERN_Q(REGEX_Q);
  static const char *REGEX_QQQ = "(?m)(\"\"\")|(\\n)|(.)";
  static const reflex::Pattern PATTERN_QQQ(REGEX_QQQ);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  switch (start())
  {
    case INITIAL:
#line 65 "quack.lxx"
/* We start with some tokens that are not value-bearing,
   * i.e., the parser needs to know only which token was matched.
   */

  /* Multi-character punctuation with names */
    break;
  }
  while (true)
  {
    switch (start())
    {
      case INITIAL:
        matcher().pattern(PATTERN_INITIAL);
        matcher().scan();
        yylloc_update(yylloc);
        switch (matcher().accept())
        {
          case 0:
            if (matcher().at_end())
            {
#line 175 "quack.lxx"
{ return EOF; }

            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 65: ==
#line 65 "quack.lxx"
{ return parser::token::EQUALS; }
            break;
          case 2: // rule at line 66: [<]=
#line 66 "quack.lxx"
{ return parser::token::ATMOST; }
            break;
          case 3: // rule at line 67: [>]=
#line 67 "quack.lxx"
{ return parser::token::ATLEAST; }


   /* Single character punctuation.  Because a character
    * in C or C++ can be treated as an integer, Bison lets
    * us return a character as a token.
    * JFlex/Cup do not let you do this in Java.
    * Here are a few ... there are more.
    */
            break;
          case 4: // rule at line 76: [(-/:->\x7b\x7d]
#line 76 "quack.lxx"
{ return text()[0]; }

  /* Keywords are essentially another kind of punctuation,
   * but since they also match the identifier pattern, we
   * need to be sure we give their patterns *before* the
   * identifier pattern.  Most scanner generators work this
   * way, but WARNING for Python PLY users:  PLY prioritizes
   * by length of the regular expression!
   * Here are a couple of examples.
   */

            break;
          case 5: // rule at line 87: class
#line 87 "quack.lxx"
{ return parser::token::CLASS; }
            break;
          case 6: // rule at line 88: def
#line 88 "quack.lxx"
{ return parser::token::DEF; }
            break;
          case 7: // rule at line 89: extends
#line 89 "quack.lxx"
{ return parser::token::EXTENDS; }
            break;
          case 8: // rule at line 90: if
#line 90 "quack.lxx"
{ return parser::token::IF; }
            break;
          case 9: // rule at line 91: elif
#line 91 "quack.lxx"
{ return parser::token::ELIF; }
            break;
          case 10: // rule at line 92: else
#line 92 "quack.lxx"
{ return parser::token::ELSE; }
            break;
          case 11: // rule at line 93: while
#line 93 "quack.lxx"
{ return parser::token::WHILE; }
            break;
          case 12: // rule at line 94: return
#line 94 "quack.lxx"
{ return parser::token::RETURN; }
            break;
          case 13: // rule at line 95: typecase
#line 95 "quack.lxx"
{ return parser::token::TYPECASE; }
            break;
          case 14: // rule at line 96: and
#line 96 "quack.lxx"
{ return parser::token::AND; }
            break;
          case 15: // rule at line 97: or
#line 97 "quack.lxx"
{ return parser::token::OR; }
            break;
          case 16: // rule at line 98: not
#line 98 "quack.lxx"
{ return parser::token::NOT; }
            break;
          case 17: // rule at line 99: boo
#line 99 "quack.lxx"
{ return parser::token::BOO; }


   /* The following tokens are value-bearing:
    * We pass a value back to the parser by copying
    * it into the yylval parameter.  The parser
    * expects string values for identifiers and
    * string literals in yylval.str.  It expects integer
    * values for integer literals in yylval.num.
    * I'll give pattern for integer literals.
    * You'll need another for identifiers.  Remember to
    * 'strdup' the value returned by 'text()', or else it will
    * be clobbered by subsequent calls.
    */

            break;
          case 18: // rule at line 114: [A-Z_a-z]+[0-9A-Z_a-z]*
#line 114 "quack.lxx"
{ yylval.str = strdup(text()); return parser::token::IDENT; }
            break;
          case 19: // rule at line 115: [0-9]+
#line 115 "quack.lxx"
{ yylval.num = atoi(text()); return parser::token::INT_LIT; }

  /* You *can* write a one-line regular expression for matching a quoted string,
   * but you probably can't read it.  (I can't read mine.)  Scanner states and
   * simpler patterns are probably a better idea.
   * You almost certainly scanner states for triple quotes.
   * The tricky bit is catching errors, such as disallowed escape sequences
   * and unclosed quotes.
   */

  /* Ignore whitespace */
            break;
          case 20: // rule at line 126: [\x09\x0a\x0d\x20]*
#line 126 "quack.lxx"
{ ; }

            break;
          case 21: // rule at line 129: [/][/]
#line 129 "quack.lxx"
{ start(comment); }
            break;
          case 22: // rule at line 136: [/][\x2a]
#line 136 "quack.lxx"
{ start(comment); }
            break;
          case 23: // rule at line 143: "
#line 143 "quack.lxx"
{ start(Q); }
            break;
          case 24: // rule at line 144: """
#line 144 "quack.lxx"
{ start(QQQ); }

 /* How the quoted strings end */
            break;
          case 25: // rule at line 171: .
#line 171 "quack.lxx"
{   report::error("Unexpected character " + std::string(text()) + " at line " + std::to_string(lineno()) +
       ", column " + std::to_string(columno()));
   }

            break;
        }
        break;
      case comment:
        matcher().pattern(PATTERN_comment);
        matcher().scan();
        yylloc_update(yylloc);
        switch (matcher().accept())
        {
          case 0:
            if (matcher().at_end())
            {
#line 131 "quack.lxx"
{ start(INITIAL); return EOF; }



 /* Multi-line comments */
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 130: [\x0a]
#line 130 "quack.lxx"
{ start(INITIAL); }
            break;
          case 2: // rule at line 137: [^\x2a]*
#line 137 "quack.lxx"
{ ; }
            break;
          case 3: // rule at line 138: [\x2a][^/]
#line 138 "quack.lxx"
{ ; }
            break;
          case 4: // rule at line 139: [\x2a][/]
#line 139 "quack.lxx"
{ start(INITIAL); }
            break;
        }
        break;
      case scomment:
        matcher().pattern(PATTERN_scomment);
        matcher().scan();
        yylloc_update(yylloc);
        switch (matcher().accept())
        {
          case 0:
            if (matcher().at_end())
            {
#line 175 "quack.lxx"
{ return EOF; }

            }
            else
            {
              out().put(matcher().input());
            }
            break;
        }
        break;
      case Q:
        matcher().pattern(PATTERN_Q);
        matcher().scan();
        yylloc_update(yylloc);
        switch (matcher().accept())
        {
          case 0:
            if (matcher().at_end())
            {
#line 151 "quack.lxx"
{ start(INITIAL); report::error(BAD_EOF_STR + " at line " + std::to_string(lineno())
                                           + ", column " + std::to_string(columno()));  }

            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 147: "
#line 147 "quack.lxx"
{ yylval.str = strdup(string_buf.c_str()); string_buf = ""; start(INITIAL); return parser::token::STRING_LIT; }
            break;
          case 2: // rule at line 155: [\x5c]["0\x5cbfnrt]
#line 155 "quack.lxx"
{ string_buf += text(); }
            break;
          case 3: // rule at line 156: [\x5c].
#line 156 "quack.lxx"
{ report::error(BAD_ESC_MSG + " at line " + std::to_string(lineno())
                    + ", column " + std::to_string(columno()));}

            break;
          case 4: // rule at line 162: \n
#line 162 "quack.lxx"
{report::error(BAD_NL_STR + " at line " + std::to_string(lineno())
                  + ", column " + std::to_string(columno()));}
            break;
          case 5: // rule at line 169: .
#line 169 "quack.lxx"
{ string_buf += text(); }

            break;
        }
        break;
      case QQQ:
        matcher().pattern(PATTERN_QQQ);
        matcher().scan();
        yylloc_update(yylloc);
        switch (matcher().accept())
        {
          case 0:
            if (matcher().at_end())
            {
#line 151 "quack.lxx"
{ start(INITIAL); report::error(BAD_EOF_STR + " at line " + std::to_string(lineno())
                                           + ", column " + std::to_string(columno()));  }

            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 148: """
#line 148 "quack.lxx"
{ yylval.str = strdup(string_buf.c_str()); string_buf = ""; start(INITIAL); return parser::token::STRING_LIT; }

            break;
          case 2: // rule at line 164: \n
#line 164 "quack.lxx"
{ string_buf += text(); }

            break;
          case 3: // rule at line 169: .
#line 169 "quack.lxx"
{ string_buf += text(); }

            break;
        }
        break;
      default:
        start(0);
    }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 178 "quack.lxx"

/* No main program here */
